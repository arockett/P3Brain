//
//  Agent.cpp
//  BasicMarkovBrainTemplate
//
//  Created by Arend Hintze on 5/30/15.
//  Copyright (c) 2015 Arend Hintze. All rights reserved.
//

#include "../Utilities/Random.h"
#include "../Utilities/Utilities.h"
#include "WireBrain.h"

int& WireBrain::defaultWidth = Parameters::register_parameter("size_width", 10, "width of the wire brain cube", "BRAIN - WIRE");
int& WireBrain::defaultHeight = Parameters::register_parameter("size_height", 10, "height of the wire brain cube", "BRAIN - WIRE");
int& WireBrain::defaultDepth = Parameters::register_parameter("size_depth", 10, "depth of the wire brain cube", "BRAIN - WIRE");
int& WireBrain::defaultNrOfBrainNodes = Parameters::register_parameter("NrOfBrainNodes", 15, "number of nodes (I/O)", "BRAIN - WIRE");
int& WireBrain::worldConnectionsSeparation = Parameters::register_parameter("worldConnectionsSeparation", 7, "distance between nodes input and output connections (I/O)", "BRAIN - WIRE");
int& WireBrain::overchargeThreshold = Parameters::register_parameter("overchargeThreshold", 3, "If a cell receives this much charge or more, it will not charge", "BRAIN - WIRE");
int& WireBrain::decayDuration = Parameters::register_parameter("decayDuration", 1, "length of time a cell will decay (while in decay a cell can not become charged)", "BRAIN - WIRE");
int& WireBrain::chargeUpdatesPerUpdate = Parameters::register_parameter("chargeUpdatesPerUpdate", 30, "Number of charge updates per brain update", "BRAIN - WIRE");
bool& WireBrain::constantInputs = Parameters::register_parameter("constantInputs", true, "if true, input values are reset every charge update, if not, input values are set on first charge update only.", "BRAIN - WIRE");

bool& WireBrain::cacheResults = Parameters::register_parameter("WireBrain_cacheResults", true, "if true, t+1 nodes will be cached. If the same input is seen, the cached node values will be used.", "BRAIN - WIRE");
int& WireBrain::cacheResultsCount = Parameters::register_parameter("WireBrain_cacheResultsCount", 1, "input combinations will be cached this many times, after this, repeats of a given input array will look up a random value from cached values", "BRAIN - WIRE");

string& WireBrain::genomeDecodingMethod = Parameters::register_parameter("genomeDecodingMethod", (string) "bitmap", "bitmap = convert genome directly, wiregenes = genes defined by start codeons, location, direction and location", "BRAIN - WIRE");
bool& WireBrain::wiregenesAllowSimpleWires = Parameters::register_parameter("wiregenes_allowSimpeWires", true, "allow SimpleWire features (lengths of straight wire)", "BRAIN - WIRE - WIREGENE");
string& WireBrain::wiregenesSimpleWireDirections = Parameters::register_parameter("wiregenes_simpleWireDirections", (string) "cardinalOnly", "cardinalOnly (wires project in 6 square directions) vs diagonalsAlso (wires project on diagonals also)", "BRAIN - WIRE - WIREGENE");
int& WireBrain::wiregenesSimpleWireMaxLength = Parameters::register_parameter("wiregenes_simpleWireMaxLength", 1, "maximum length of a SimpleWire (if 1, direction is effectively ignored). Wires that would project outside of brain are clipped", "BRAIN - WIRE - WIREGENE");
bool& WireBrain::wiregenesAllowWormholes = Parameters::register_parameter("wiregenes_AllowWormholes", false, "allow Wormhole features (one directional links between distant wires)", "BRAIN - WIRE - WIREGENE");
int& WireBrain::wiregenesWormholesBidirectional = Parameters::register_parameter("wiregenes_WormholesBidirectional", 0, "allow Wormhole features to be bidirectional(0 = no, 1 = random, 2 = always)", "BRAIN - WIRE - WIREGENE");
bool& WireBrain::wiregenesAllowSquiggleWires = Parameters::register_parameter("wiregenes_AllowSquiggleWires", false, "allow squiggleWire features (wires generated by converting genome into list of directions)", "BRAIN - WIRE - WIREGENE");
int& WireBrain::wiregenesSquiggleWireMinLength = Parameters::register_parameter("wiregenes_SquiggleWireMinLength", 4, "minimum length of a SquiggleWire (if 1, it will look just like a SimpleWire). Wires that would project outside of brain are clipped", "BRAIN - WIRE - WIREGENE");
int& WireBrain::wiregenesSquiggleWireMaxLength = Parameters::register_parameter("wiregenes_SquiggleWireMaxLength", 10, "maximum length of a SquiggleWire (if 1, it will look just like a SimpleWire). Wires that would project outside of brain are clipped", "BRAIN - WIRE - WIREGENE");
string& WireBrain::wiregenesSquiggleWireDirections = Parameters::register_parameter("wiregenes_SquiggleWireDirections", (string) "cardinalOnly", "cardinalOnly (wires project in 6 square directions) vs diagonalsAlso (wires project on diagonals also)", "BRAIN - WIRE - WIREGENE");
int& WireBrain::wiregenesInitialGeneCount = Parameters::register_parameter("wiregenes_InitialGeneCount", 50, "number of start codons to be inserted into inital genome", "BRAIN - WIRE - WIREGENE");
double& WireBrain::bitmapInitialFillRatio = Parameters::register_parameter("bitmap_InitialFillRatio", .2, "if bitmap genomeDecodingMethod: amount of the brain that will initially be wire vs. empty", "BRAIN - WIRE");
