Hello and Welcome to Markov Brains! This guide will walk you though everything you need to know about running Markov Brains.

This document is divided into five sections.
		0) Introduction to MABE
        1) What is a Markov Brain.
        2) How do you use this software.
        3) Implementation Details (things like how is the genome mutated and used to create Agents, 
                how do worlds interface with agents and how do agents update, etc.) 
        4) reference for anyone interested in working on the code (Including creating worlds, gates, brains, etc.)

Section 0.
What is MABE?
MABE (Modular Agent Based Evolver) is a digital evolution tool. MABE can be used to create populations of digital agents, evaluate these agents and generate new populations by means of natural or artifical selection.
Section 1. 
What is a Markov Brain

Blah Blah....


Section 2 How do you use this software


Section 2.0 Before we get started
Terms. Yeah, sorry, there are a couple of terms which you will need to know. I'm putting them up front so you'll be able to find them again if you need them.

'on the line of decent' (aka LOD): You most likely know what a line of decent is (if not, google it!), but we often talk about 'on the line of decent' or we might say this is LOD data. What we mean is that this is data for one line of decent. In real terms, files that record LOD data can not do so until there is a convergance where every living agent in the current population has one shared ancestor in their history. This oldest shared ancestor is called the Most Recent Common Ancestor (MRCA). Of course this all get's much more messy if we allow for sex (but isn't that alway the way?!) 


Section 2.1 Getting up and running
So, you actually want to run an experiment! Well, you've come to the right place!
I will assume that you have a basic working knowledge of what Markov Brains are and how they work (if not, read section 1).

The first thing to do is to get the Markov Brain code running. But before we do that, the Markov Brain software does not have an interface, in order to work with it, you will need to know how to work with a terminal (i.e. command line). Below are links to introductions for various systems.

If you are on a Mac check out:
http://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line
or
http://www.davidbaumgold.com/tutorials/command-line/

If you are on a PC check out:
http://www.computerhope.com/issues/chusedos.htm

If you are on Linix (you pobably already know this stuff) check out:
http://linuxcommand.org/lc3_lts0020.php


Okay, now you have a working knowledge of Markov Brains and you know how to navigate in the command line. Rather then attempt to keep up to date versions of the software for every possible computer, we provide the code and leave it up to you to compile the code for your computer. Don't worry, it's not as bad as it sounds. Below are are instructions for each system.

Mac:
        get c++ compiler if you don't have it
        get code from git
        compile
        test run - note, this is the command you will use to run MBs
        you can press cntr & c at the same time to stop execution

PC:
        get c++ compiler if you don't have it
        get code from git
        compile
        test run - note, this is the command you will use to run MBs
        you can press cntr & c at the same time to stop execution

LINUX:
        get c++ compiler if you don't have it
        get code from git
        compile
        test run - note, this is the command you will use to run MBs
        you can press cntr & c at the same time to stop execution


Section 2.2 Settings files
You should now have a working version of the code. If you just run the code now it will use all the default values... which are not terribly interesting. The first thing we need to do is make a settings file. Luckily the program knows how to make a settings file!

Try the following:
        ./MB makeConfigFile 1

 you should get:
        some output
        some more output

        making settings.cfg
        exiting

List the contents of the directory and among other things, you should now see 'settings.cfg' open this in the editor of your choice. In the settings.sfg file you will see a number a settings divided into categories. Since this file is brand new, it contains all the default settings. NOTE: values for bool variables must be 0 or 1 (not false or true).

you can find out more details about all settings in the appendix:
        link to appendix

For now, lets make a couple of changes to get a feel for how this works.
Find the category labeled 'GATE TYPES:'. You should see a list of gate types which are all currently set to 0. Oh, that explains why they were not developing any fitness! Let's fix that. Find the line that says 'detGate = 0' and change the 0 to a 1.

Save settings.cfg and rerun the program (make sure that you don't have 'makeConfigFile 1' after the program name)

Now you should see a maxFitness > 0.

Most of the settings in the settings.cfg are pretty self explanatory, given that they have comments! Some are more esoteric. In the next few sections I'll be covering what some of these mean, but I would suggest not worrying about settings that you don't understand yet (if it's really bothering you, you can look them up in the appendix).


Section 2.3 Comand line settings
Any setting in the settings file can be set on the command line. The settings names and values are the same, just leave out the '='. This allows you to try things without needed to edit the settings file. More importantly, it allows for the creation of scripts to create and manage larger jobs.

example:
  ./MB repNumber 104 updates 300
// might change to ./MB -repNumber 104 -updates 300


Section 2.4 File Output
None of this would be terribly useful if we were not able to record it! During a run, data is be stored with the genomes. Different methods can be used by the program to write this data to dick. We assume that you will be using a program to look at your data (generate graphs or what have you) that is capable of reading csv files. As such we are not terribly worried about human readability in the output files (columns may appear in random order for example).

By default the programs will write out a number of files.

LOD files:
  data.csv
  genome.csv
population files:
  average.csv
  dominant.csv

  randomSeed.txt

Lets look at whats in each of these files.

open data.csv with your editor of choice (or use 'head data.csv' on the command line)
You should see that the first line of the file lists the column names and then each following line has data.
data.csv contains all data that is recorded for agents on the LOD (line of decent).

in settings.cfg you will see few settings that are used to determine what goes into the data.csv

repNumber - a directory will be created with this number (if it's not 0) all output files will be placed in this directory.
updates - how long will do you want the program to run
terminate after - since we output data on the LOD we need to wait until a MRCA is established. This can take a long time. terminate after is how long we are willing to wait for convergance. once updates + terminate_after is reached the program will end. Any LOD baised files that have not yet been written will be written assuming that a random agent in the current population is MRCA.

data interval - how often do you want to write to data.csv. If you are running a million updates, you probably don't what a data.csv with a million lines. Set this to 100 to output on updates 0,100,200,300...

next, look at genome.csv
well, this is a lot of numbers (you may need to scroll down to see anything other then the header). This file lists the genomes on the LOD

genome interval - this is just like data interval, but for genome.csv

Unlike data and genome, average.csv and dominant.csv are output in "realtime". At each dataInterval, they write to file baised off the current state of run.

average.csv - contains a list of average values for the population (this list can be configerd with a to be determined setting)
dominiant.csv - contains the same type of data as data.csv, but this is not on the LOD, but rather for the highest scoring agent on each data interval.

randomSeed.txt - contains the random seed for this run (which may be repNumber) - so the experiment can be rerun.

2.4.1 The other way to output data
checkpoint method with ancestor linking.

2.5  

